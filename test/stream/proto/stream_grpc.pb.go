// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamTestClient is the client API for StreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTestClient interface {
	GetData(ctx context.Context, in *Point, opts ...grpc.CallOption) (StreamTest_GetDataClient, error)
	SendNGetData(ctx context.Context, opts ...grpc.CallOption) (StreamTest_SendNGetDataClient, error)
}

type streamTestClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTestClient(cc grpc.ClientConnInterface) StreamTestClient {
	return &streamTestClient{cc}
}

func (c *streamTestClient) GetData(ctx context.Context, in *Point, opts ...grpc.CallOption) (StreamTest_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[0], "/StreamTest/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTest_GetDataClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamTestGetDataClient struct {
	grpc.ClientStream
}

func (x *streamTestGetDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamTestClient) SendNGetData(ctx context.Context, opts ...grpc.CallOption) (StreamTest_SendNGetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[1], "/StreamTest/SendNGetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestSendNGetDataClient{stream}
	return x, nil
}

type StreamTest_SendNGetDataClient interface {
	Send(*Point) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamTestSendNGetDataClient struct {
	grpc.ClientStream
}

func (x *streamTestSendNGetDataClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTestSendNGetDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTestServer is the server API for StreamTest service.
// All implementations must embed UnimplementedStreamTestServer
// for forward compatibility
type StreamTestServer interface {
	GetData(*Point, StreamTest_GetDataServer) error
	SendNGetData(StreamTest_SendNGetDataServer) error
	mustEmbedUnimplementedStreamTestServer()
}

// UnimplementedStreamTestServer must be embedded to have forward compatible implementations.
type UnimplementedStreamTestServer struct {
}

func (UnimplementedStreamTestServer) GetData(*Point, StreamTest_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedStreamTestServer) SendNGetData(StreamTest_SendNGetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendNGetData not implemented")
}
func (UnimplementedStreamTestServer) mustEmbedUnimplementedStreamTestServer() {}

// UnsafeStreamTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTestServer will
// result in compilation errors.
type UnsafeStreamTestServer interface {
	mustEmbedUnimplementedStreamTestServer()
}

func RegisterStreamTestServer(s grpc.ServiceRegistrar, srv StreamTestServer) {
	s.RegisterService(&StreamTest_ServiceDesc, srv)
}

func _StreamTest_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTestServer).GetData(m, &streamTestGetDataServer{stream})
}

type StreamTest_GetDataServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type streamTestGetDataServer struct {
	grpc.ServerStream
}

func (x *streamTestGetDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamTest_SendNGetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTestServer).SendNGetData(&streamTestSendNGetDataServer{stream})
}

type StreamTest_SendNGetDataServer interface {
	Send(*Response) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type streamTestSendNGetDataServer struct {
	grpc.ServerStream
}

func (x *streamTestSendNGetDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTestSendNGetDataServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTest_ServiceDesc is the grpc.ServiceDesc for StreamTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamTest",
	HandlerType: (*StreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _StreamTest_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendNGetData",
			Handler:       _StreamTest_SendNGetData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test/stream/proto/stream.proto",
}
